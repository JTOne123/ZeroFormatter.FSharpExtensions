#r @"packages/build/FAKE/tools/FakeLib.dll"
open Fake
open Fake.Git
open Fake.AssemblyInfoFile
open Fake.ReleaseNotesHelper
open System
open System.IO
#if MONO
#else
#load "packages/build/SourceLink.Fake/tools/Fake.fsx"
open SourceLink
#endif
open Fake.Testing.NUnit3

let outDir = currentDirectory @@ "bin"

let project = "ZeroFormatter.FSharpExtensions"

let netCoreProject = "src/ZeroFormatter.FSharpExtensions/ZeroFormatter.FSharpExtensions.csproj"
let net45TestProject = "tests/ZeroFormatter.FSharpExtensions.Tests/ZeroFormatter.FSharpExtensions.Tests.fsproj"
let netCoreTestProject = "tests/ZeroFormatter.FSharpExtensions.NETCore.Tests/ZeroFormatter.FSharpExtensions.NETCore.Tests.fsproj"

let solutionFile  = sprintf "%s.sln" project

// Pattern specifying assemblies to be tested using NUnit
let testAssemblies = "tests/ZeroFormatter.FSharpExtensions.Tests/bin/Release/*/*Tests*.dll"

// Git configuration (used for publishing documentation in gh-pages branch)
// The profile where the project is posted
let gitOwner = "pocketberserer"
let gitHome = "https://github.com/" + gitOwner

// The name of the project on GitHub
let gitName = project

// The url for the raw files hosted
let gitRaw = environVarOrDefault "gitRaw" "https://raw.github.com/pocketberserker"

// --------------------------------------------------------------------------------------
// END TODO: The rest of the file includes standard build steps
// --------------------------------------------------------------------------------------

// Read additional information from the release notes document
let release = LoadReleaseNotes "RELEASE_NOTES.md"

// --------------------------------------------------------------------------------------
// Clean build results

Target "Clean" (fun _ ->
  CleanDirs [outDir; "temp"]
  !! "./src/**/bin/Release"
  |> CleanDirs
)

// --------------------------------------------------------------------------------------
// Build library & test project

Target "Build" (fun _ ->

  DotNetCli.Restore (fun p ->
    { p with
        Project = netCoreProject
    }
  )
  DotNetCli.Build (fun p ->
    { p with
        Project = netCoreProject
    }
  )

  DotNetCli.Restore (fun p ->
    { p with
        Project = net45TestProject
    }
  )
  DotNetCli.Build (fun p ->
    { p with
        Project = net45TestProject
    }
  )

  DotNetCli.Restore (fun p ->
    { p with
        Project = netCoreTestProject
    }
  )
  DotNetCli.Build (fun p ->
    { p with
        Project = netCoreTestProject
    }
  )
)

// --------------------------------------------------------------------------------------
// Run the unit tests using test runner
Target "RunTests" (fun _ ->
  !! testAssemblies
  |> NUnit3 (fun p ->
    { p with
        ToolPath = findToolInSubPath  "nunit3-console.exe" (currentDirectory @@ "packages" @@ "build" @@ "NUnit.ConsoleRunner" @@ "tools")
    }
  )

  DotNetCli.Test (fun p ->
    { p with
        Project = netCoreTestProject
    }
  )
)

#if MONO
#else
// --------------------------------------------------------------------------------------
// SourceLink allows Source Indexing on the PDB generated by the compiler, this allows
// the ability to step through the source code of external libraries https://github.com/ctaggart/SourceLink

Target "SourceLink" (fun _ ->
    let baseUrl = sprintf "%s/%s/{0}/%%var2%%" gitRaw project
    !! "src/**/*.??proj"
    -- "src/**/*.shproj"
    |> Seq.iter (fun projFile ->
        let proj = VsProj.LoadRelease projFile
        SourceLink.Index proj.CompilesNotLinked proj.OutputFilePdb __SOURCE_DIRECTORY__ baseUrl
    )
)

#endif

// --------------------------------------------------------------------------------------
// Build a NuGet package

Target "NuGet" (fun _ ->

  DotNetCli.Pack (fun p ->
    { p with
        Project = netCoreProject
        OutputPath = outDir
    }
  )
)

Target "PublishNuget" (fun _ ->
  Paket.Push(fun p ->
    { p with
        WorkingDir = outDir })
)

#load "paket-files/build/fsharp/FAKE/modules/Octokit/Octokit.fsx"
open Octokit

Target "Release" (fun _ ->
    StageAll ""
    Git.Commit.Commit "" (sprintf "Bump version to %s" release.NugetVersion)
    Branches.push ""

    Branches.tag "" release.NugetVersion
    Branches.pushTag "" "origin" release.NugetVersion

    // release on github
    createClient (getBuildParamOrDefault "github-user" "") (getBuildParamOrDefault "github-pw" "")
    |> createDraft gitOwner gitName release.NugetVersion (release.SemVer.PreRelease <> None) release.Notes
    // TODO: |> uploadFile "PATH_TO_FILE"
    |> releaseDraft
    |> Async.RunSynchronously
)

Target "All" DoNothing

"Clean"
  ==> "Build"
  ==> "RunTests"
  ==> "All"

"All"
#if MONO
#else
  =?> ("SourceLink", Pdbstr.tryFind().IsSome )
#endif
  ==> "NuGet"

"NuGet"
  ==> "PublishNuget"
  ==> "Release"

RunTargetOrDefault "All"
